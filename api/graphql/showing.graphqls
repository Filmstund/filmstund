type Query {
    showing(id: UUID, webID: Base64ID): Showing
    publicShowings(afterDate: LocalDate): [Showing!]!
    showingForMovie(movieId: UUID!): [Showing!]!
}

type Mutation {
    attendShowing(showingID: UUID!, paymentOption: PaymentOption!): Showing!
    unattendShowing(showingID: UUID!): Showing!

    createShowing(showing: CreateShowingInput!): Showing!

    # Delete a showing and return all public showings
    deleteShowing(showingID: UUID!): [Showing!]! @auth(requires: SHOWING_ADMIN)

    markAsBought(showingID: UUID!, price: SEK!): Showing! @auth(requires: SHOWING_ADMIN)
    processTicketUrls(showingID: UUID!, ticketUrls: [String!]): Showing! @auth(requires: SHOWING_ADMIN)

    updateShowing(showingID: UUID!, newValues: UpdateShowingInput): Showing! @auth(requires: SHOWING_ADMIN)

    promoteToAdmin(showingID: UUID!, userToPromote: UUID!): Showing! @auth(requires: SHOWING_ADMIN)
}

type Showing {
    id: UUID!
    webID: Base64ID!
    filmstadenShowingID: String
    slug: String!
    date: LocalDate!
    time: LocalTime!
    movieID: UUID!
    movie: Movie!
    location: String!
    cinemaScreen: CinemaScreen
    price: SEK
    ticketsBought: Boolean!
    admin: PublicUser!
    private: Boolean!
    payToUser: PublicUser!
    updateTime: Time!
    createTime: Time!
    filmstadenSeatMap: [FilmstadenSeatMap!]!
    attendees: [PublicAttendee!]!
}

type PublicAttendee {
    userID: UUID!
    showingID: UUID!
    userInfo: PublicUser!
}

type CinemaScreen {
    id: ID!
    name: String!
}

input CinemaScreenInput {
    id: String!
    name: String
}

# Used for supplying how the user will pay, when attending a showing
input PaymentOption {
    type: PaymentType!
    ticketNumber: String
}

enum PaymentType {
    SWISH
    GIFT_CERTIFICATE
}

input CreateShowingInput {
    date: LocalDate!
    time: LocalTime!
    movieID: UUID!
    location: String!
    filmstadenScreen: CinemaScreenInput
    filmstadenRemoteEntityID: String
}

input UpdateShowingInput {
    price: SEK!
    payToUser: UUID!
    location: String!
    filmstadenRemoteEntityID: String
    time: LocalTime!
    date: LocalDate!
}
