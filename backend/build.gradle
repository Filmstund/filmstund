import java.time.ZonedDateTime

buildscript {
  ext.kotlinVersion = '1.1.51'
  ext.springBootSnapshotVersion = '2.0.0.M5'
  ext.junitJupiterVersion = '5.0.1'

  repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
  }

  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootSnapshotVersion")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
  }
}

plugins {
  id("org.ajoberstar.grgit") version "2.0.1"
  id("net.researchgate.release") version "2.6.0"
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.ajoberstar.grgit"

sourceCompatibility = 1.8
compileKotlin {
  kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
  kotlinOptions.jvmTarget = "1.8"
}

repositories {
  mavenCentral()
  maven { url "https://repo.spring.io/milestone" }
  maven { url "https://repo.spring.io/snapshot" }
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter-web-services:$springBootSnapshotVersion")
  compile("org.springframework.boot:spring-boot-starter-data-mongodb:$springBootSnapshotVersion")
  compile("org.springframework.boot:spring-boot-starter-cache:$springBootSnapshotVersion")
  compile("org.springframework.boot:spring-boot-starter-security:$springBootSnapshotVersion")
  compile("org.springframework.security:spring-security-jwt:1.0.8.RELEASE")
  compile("org.springframework.security.oauth:spring-security-oauth2:2.2.0.RELEASE")
  compile("org.springframework.session:spring-session-data-mongodb:2.0.0.M3")
  compile("org.springframework.session:spring-session-core:$springBootSnapshotVersion")
  compile("com.github.ben-manes.caffeine:caffeine:2.+")
  compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion")
  compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
  compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.1")
  compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.1")
  compile("com.googlecode.libphonenumber:libphonenumber:8.4.2")
  compile("com.google.guava:guava:21.0")
  compile("org.jsoup:jsoup:1.10.3")
  testCompile("org.springframework.boot:spring-boot-starter-test:$springBootSnapshotVersion")
  testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
  testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
}


tasks {
  task versionBanner {
    ext.addPipeToTheEndOfStr = {Object value ->
      def strValue = value.toString()
      def strLen = strValue.length()
      def times = Math.abs(55 - strLen)
      return strValue + " " * (times - 1) + "│"
    }

    doLast {
      def gitHead = grgit.head()
      def gitCommitId = ext.addPipeToTheEndOfStr(gitHead.id)
      def gitCommitTime = ext.addPipeToTheEndOfStr(gitHead.dateTime)
      def gitBranch = grgit.branch.current().name
      def now = ext.addPipeToTheEndOfStr(ZonedDateTime.now())
      def projectNameAndBranch = ext.addPipeToTheEndOfStr("${project.name} ($gitBranch)")
      def projectVersion = ext.addPipeToTheEndOfStr(version)
      def banner =
"  ┌───────────────┬───────────────────────────────────────────────────────┐\n" +
"  │ Project       │ $projectNameAndBranch\n" +
"  ├───────────────┼───────────────────────────────────────────────────────┤\n"+
"  │ Version       │ $projectVersion\n"+
"  │ Revision SHA  │ $gitCommitId\n"+
"  │ Revision Date │ $gitCommitTime\n"+
"  │ Build date    │ $now\n"+
"  └───────────────┴───────────────────────────────────────────────────────┘"
      def bannerFile = new File("build/banner.txt")
      bannerFile.createNewFile()
      bannerFile.write(banner)
    }
  }

  task copyBanner(dependsOn: 'versionBanner', type: Copy) {
    from "build/"
    include "banner.txt"
    into "build/resources/main"
  }

  processResources.dependsOn copyBanner

  task printVersion  {
    description = "Prints the current version"
    println("Current version: $version")
  }
}

release {
  preTagCommitMessage = '[Release] - Prepare release: '
  tagCommitMessage = '[Release] - New version: '
  newVersionCommitMessage = '[Release] - Preparing next dev release: '
}

