import java.time.ZonedDateTime

buildscript {
  ext {
    kotlinVersion = '1.2.30'
    springBootVersion = '2.0.0.RELEASE'
    junitJupiterVersion = '5.0.2'
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
  }
}

plugins {
  id("org.ajoberstar.grgit") version "2.3.0"
  id("net.researchgate.release") version "2.6.0"
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.ajoberstar.grgit"

sourceCompatibility = 1.8
compileKotlin {
  kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
  kotlinOptions.jvmTarget = "1.8"
}

repositories {
  mavenCentral()
}

dependencies {
  compile("com.graphql-java:graphql-spring-boot-starter:4.0.0.M1")
  compile("com.graphql-java:graphql-java-tools:4.3.0")
  compile("com.graphql-java:graphql-java:7.0")
  compile("org.springframework.boot:spring-boot-starter-web-services:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-logging:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-data-mongodb:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-cache:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-security:$springBootVersion")
  compile("org.springframework.security:spring-security-jwt:1.0.9.RELEASE")
  compile("org.springframework.security.oauth:spring-security-oauth2:2.2.1.RELEASE")

  /* The below is fix for kotlin-reflect in 1.2.20 */
  compile("org.springframework.data:spring-data-mongodb:2.0.3.RELEASE")
  compile("org.springframework.data:spring-data-commons:2.0.3.RELEASE")

  compile("com.github.ben-manes.caffeine:caffeine:2.+")
  compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.4")
  compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.4")
  compile("com.googlecode.libphonenumber:libphonenumber:8.8.10")
  compile("com.google.guava:guava:23.6-jre")
  compile("net.sf.biweekly:biweekly:0.6.1")

  compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
  compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
  compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

  testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
  testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
  testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
}


tasks {
  task versionBanner {
    ext.addPipeToTheEndOfStr = {Object value ->
      def strValue = value.toString()
      def strLen = strValue.length()
      def times = Math.abs(55 - strLen)
      return strValue + " " * (times - 1) + "│"
    }

    doLast {
      def gitHead = grgit.head()
      def gitCommitId = ext.addPipeToTheEndOfStr(gitHead.id)
      def gitCommitTime = ext.addPipeToTheEndOfStr(gitHead.dateTime)
      def gitBranch = grgit.branch.current().name
      def now = ext.addPipeToTheEndOfStr(ZonedDateTime.now())
      def projectNameAndBranch = ext.addPipeToTheEndOfStr("${project.name} ($gitBranch)")
      def projectVersion = ext.addPipeToTheEndOfStr(version)
      def banner =
"  ┌───────────────┬───────────────────────────────────────────────────────┐\n" +
"  │ Project       │ $projectNameAndBranch\n" +
"  ├───────────────┼───────────────────────────────────────────────────────┤\n"+
"  │ Version       │ $projectVersion\n"+
"  │ Revision SHA  │ $gitCommitId\n"+
"  │ Revision Date │ $gitCommitTime\n"+
"  │ Build date    │ $now\n"+
"  └───────────────┴───────────────────────────────────────────────────────┘"
      def bannerFile = new File("build/banner.txt")
      bannerFile.createNewFile()
      bannerFile.write(banner)
    }
  }

  task copyBanner(dependsOn: 'versionBanner', type: Copy) {
    from "build/"
    include "banner.txt"
    into "build/resources/main"
  }

  processResources.dependsOn copyBanner

  task printVersion  {
    description = "Prints the current version"
    println("Current version: $version")
  }
}

release {
  preTagCommitMessage = '[Release] - Prepare release: '
  tagCommitMessage = '[Release] - New version: '
  newVersionCommitMessage = '[Release] - Preparing next dev release: '
}

