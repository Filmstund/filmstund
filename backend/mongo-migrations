### Pending migrations ###
N/A

### Migrations already done in deployed application ###
# Change fields to @DBRef on all showings
db.showing.find({}).forEach(s => {
    s.movie = {
        $ref: "movie",
        $id: s.movieId
    }
    
    adminId = s.admin
    payToUserId = s.payToUser
    
    s.admin = {
        $ref: "user",
        $id: adminId
    }
    
    s.payToUser = {
        $ref: "user",
        $id: payToUserId
    }
    
    db.showing.save(s);
});

#
# Add archived flag
db.movie.update({}, {$set: {"archived": false}}, {upsert: false, multi:true})

# Remove all IMDb ID
db.movie.update({}, {$set: {"imdbId": {"value" : null,"state" : "Missing"}}}, {upsert: false, multi:true})

# Update participants to new format introduced in feature/ftg-biljetter
db.showing.find({}).forEach(s => {
    newParts = s.participants.map(p => {
       return {
            userId: p,
            _class: "rocks.didit.sefilm.domain.SwishParticipant"
          };
    });
    s.participants = newParts;
    db.showing.save(s);
});

# Remove old bioklubbnummer
db.getCollection('user').updateMany( {}, {$unset: {"bioklubbnummer": "", "sfMembershipId": ""}})
# Remove old non-working posters
db.getCollection('movie').updateMany({poster: /.*msprod-catalogapi.*/}, {$unset: {"poster": ""}})

