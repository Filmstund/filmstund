// Code generated by sqlc. DO NOT EDIT.
// source: attendees.sql

package dao

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addAttendee = `-- name: AddAttendee :exec
insert into attendees (user_id, showing_id, attendee_type, has_paid, amount_owed, gift_certificate_used)
values ($1, $2, $3, $4, $5, $6)
`

type AddAttendeeParams struct {
	UserID              uuid.UUID      `json:"userID"`
	ShowingID           uuid.UUID      `json:"showingID"`
	AttendeeType        string         `json:"attendeeType"`
	HasPaid             bool           `json:"hasPaid"`
	AmountOwed          int32          `json:"amountOwed"`
	GiftCertificateUsed sql.NullString `json:"giftCertificateUsed"`
}

func (q *Queries) AddAttendee(ctx context.Context, arg AddAttendeeParams) error {
	_, err := q.db.Exec(ctx, addAttendee,
		arg.UserID,
		arg.ShowingID,
		arg.AttendeeType,
		arg.HasPaid,
		arg.AmountOwed,
		arg.GiftCertificateUsed,
	)
	return err
}

const attendeePaymentDetails = `-- name: AttendeePaymentDetails :one
SELECT user_id,
       showing_id,
       has_paid,
       amount_owed,
       attendee_type,
       s.pay_to_user,
       payto.phone::varchar as pay_to_phone,
       m.title::varchar     as movie_title
FROM attendees a
         left outer join showings s on s.id = a.showing_id
         left join movies m on m.id = s.movie_id
         left join users payto on payto.id = s.pay_to_user
WHERE a.showing_id = $1
  AND a.user_id = $2
`

type AttendeePaymentDetailsParams struct {
	ShowingID uuid.UUID `json:"showingID"`
	UserID    uuid.UUID `json:"userID"`
}

type AttendeePaymentDetailsRow struct {
	UserID       uuid.UUID     `json:"userID"`
	ShowingID    uuid.UUID     `json:"showingID"`
	HasPaid      bool          `json:"hasPaid"`
	AmountOwed   int32         `json:"amountOwed"`
	AttendeeType string        `json:"attendeeType"`
	PayToUser    uuid.NullUUID `json:"payToUser"`
	PayToPhone   string        `json:"payToPhone"`
	MovieTitle   string        `json:"movieTitle"`
}

func (q *Queries) AttendeePaymentDetails(ctx context.Context, arg AttendeePaymentDetailsParams) (AttendeePaymentDetailsRow, error) {
	row := q.db.QueryRow(ctx, attendeePaymentDetails, arg.ShowingID, arg.UserID)
	var i AttendeePaymentDetailsRow
	err := row.Scan(
		&i.UserID,
		&i.ShowingID,
		&i.HasPaid,
		&i.AmountOwed,
		&i.AttendeeType,
		&i.PayToUser,
		&i.PayToPhone,
		&i.MovieTitle,
	)
	return i, err
}

const listAttendees = `-- name: ListAttendees :many
SELECT a.user_id,
       showing_id,
       has_paid,
       amount_owed,
       attendee_type,
       gift_certificate_used,
       u.filmstaden_membership_id,
       gc.number      as gift_certificate_number,
       gc.expire_time as gift_certificate_expire_time
FROM attendees a
         left join users u on u.id = a.user_id
         left outer join showings s on s.id = a.showing_id
         left outer join gift_certificate gc on gc.user_id = a.user_id and gc.number = a.gift_certificate_used
WHERE a.showing_id = $1
  AND s.admin = $2
`

type ListAttendeesParams struct {
	ShowingID uuid.UUID `json:"showingID"`
	AdminID   uuid.UUID `json:"adminID"`
}

type ListAttendeesRow struct {
	UserID                    uuid.UUID      `json:"userID"`
	ShowingID                 uuid.UUID      `json:"showingID"`
	HasPaid                   bool           `json:"hasPaid"`
	AmountOwed                int32          `json:"amountOwed"`
	AttendeeType              string         `json:"attendeeType"`
	GiftCertificateUsed       sql.NullString `json:"giftCertificateUsed"`
	FilmstadenMembershipID    sql.NullString `json:"filmstadenMembershipID"`
	GiftCertificateNumber     sql.NullString `json:"giftCertificateNumber"`
	GiftCertificateExpireTime sql.NullTime   `json:"giftCertificateExpireTime"`
}

func (q *Queries) ListAttendees(ctx context.Context, arg ListAttendeesParams) ([]ListAttendeesRow, error) {
	rows, err := q.db.Query(ctx, listAttendees, arg.ShowingID, arg.AdminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAttendeesRow
	for rows.Next() {
		var i ListAttendeesRow
		if err := rows.Scan(
			&i.UserID,
			&i.ShowingID,
			&i.HasPaid,
			&i.AmountOwed,
			&i.AttendeeType,
			&i.GiftCertificateUsed,
			&i.FilmstadenMembershipID,
			&i.GiftCertificateNumber,
			&i.GiftCertificateExpireTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
