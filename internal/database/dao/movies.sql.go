// Code generated by sqlc. DO NOT EDIT.
// source: movies.sql

package dao

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const allMovies = `-- name: AllMovies :many
SELECT id, filmstaden_id, imdb_id, tmdb_id, slug, title, release_date, production_year, runtime, poster, genres, popularity, popularity_update_time, archived, update_time, create_time
FROM movies
WHERE archived = $1
order by release_date
`

func (q *Queries) AllMovies(ctx context.Context, archived bool) ([]Movie, error) {
	rows, err := q.db.Query(ctx, allMovies, archived)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.FilmstadenID,
			&i.ImdbID,
			&i.TmdbID,
			&i.Slug,
			&i.Title,
			&i.ReleaseDate,
			&i.ProductionYear,
			&i.Runtime,
			&i.Poster,
			&i.Genres,
			&i.Popularity,
			&i.PopularityUpdateTime,
			&i.Archived,
			&i.UpdateTime,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const disableMoviePopularity = `-- name: DisableMoviePopularity :exec
UPDATE movies
set popularity             = -1,
    popularity_update_time = CURRENT_TIMESTAMP,
    update_time            = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DisableMoviePopularity(ctx context.Context, movieID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableMoviePopularity, movieID)
	return err
}

const lookupFilmstadenID = `-- name: LookupFilmstadenID :one
SELECT filmstaden_id
FROM movies m
WHERE m.id = $1
`

func (q *Queries) LookupFilmstadenID(ctx context.Context, movieID uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, lookupFilmstadenID, movieID)
	var filmstaden_id string
	err := row.Scan(&filmstaden_id)
	return filmstaden_id, err
}

const lookupMovieTitle = `-- name: LookupMovieTitle :one
SELECT title
FROM movies m
WHERE m.id = $1
`

func (q *Queries) LookupMovieTitle(ctx context.Context, movieID uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, lookupMovieTitle, movieID)
	var title string
	err := row.Scan(&title)
	return title, err
}

const lookupSlugAndFSID = `-- name: LookupSlugAndFSID :one
SELECT slug, filmstaden_id
from movies
where id = $1
`

type LookupSlugAndFSIDRow struct {
	Slug         string `json:"slug"`
	FilmstadenID string `json:"filmstadenID"`
}

func (q *Queries) LookupSlugAndFSID(ctx context.Context, movieID uuid.UUID) (LookupSlugAndFSIDRow, error) {
	row := q.db.QueryRow(ctx, lookupSlugAndFSID, movieID)
	var i LookupSlugAndFSIDRow
	err := row.Scan(&i.Slug, &i.FilmstadenID)
	return i, err
}

const movie = `-- name: Movie :one
select id, filmstaden_id, imdb_id, tmdb_id, slug, title, release_date, production_year, runtime, poster, genres, popularity, popularity_update_time, archived, update_time, create_time
FROM movies
WHERE id = $1
  AND archived = false
order by release_date desc
`

func (q *Queries) Movie(ctx context.Context, id uuid.UUID) (Movie, error) {
	row := q.db.QueryRow(ctx, movie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.FilmstadenID,
		&i.ImdbID,
		&i.TmdbID,
		&i.Slug,
		&i.Title,
		&i.ReleaseDate,
		&i.ProductionYear,
		&i.Runtime,
		&i.Poster,
		&i.Genres,
		&i.Popularity,
		&i.PopularityUpdateTime,
		&i.Archived,
		&i.UpdateTime,
		&i.CreateTime,
	)
	return i, err
}

const outdatedMovies = `-- name: OutdatedMovies :many
SELECT id,
       tmdb_id,
       title,
       production_year,
       EXTRACT('YEAR' FROM release_date)::int as release_year,
       popularity,
       popularity_update_time
FROM movies
WHERE archived = false
  AND popularity >= 0
  AND popularity_update_time < CURRENT_TIMESTAMP - INTERVAL '7 day'
ORDER BY random()
`

type OutdatedMoviesRow struct {
	ID                   uuid.UUID     `json:"id"`
	TmdbID               sql.NullInt64 `json:"tmdbID"`
	Title                string        `json:"title"`
	ProductionYear       int32         `json:"productionYear"`
	ReleaseYear          int32         `json:"releaseYear"`
	Popularity           float64       `json:"popularity"`
	PopularityUpdateTime time.Time     `json:"popularityUpdateTime"`
}

func (q *Queries) OutdatedMovies(ctx context.Context) ([]OutdatedMoviesRow, error) {
	rows, err := q.db.Query(ctx, outdatedMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OutdatedMoviesRow
	for rows.Next() {
		var i OutdatedMoviesRow
		if err := rows.Scan(
			&i.ID,
			&i.TmdbID,
			&i.Title,
			&i.ProductionYear,
			&i.ReleaseYear,
			&i.Popularity,
			&i.PopularityUpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMoviePopularity = `-- name: UpdateMoviePopularity :exec
UPDATE movies
SET popularity             = $1,
    popularity_update_time = CURRENT_TIMESTAMP,
    tmdb_id                = $2,
    imdb_id                = $3,
    update_time            = CURRENT_TIMESTAMP
WHERE id = $4
`

type UpdateMoviePopularityParams struct {
	Popularity float64        `json:"popularity"`
	TmdbID     sql.NullInt64  `json:"tmdbID"`
	ImdbID     sql.NullString `json:"imdbID"`
	MovieID    uuid.UUID      `json:"movieID"`
}

func (q *Queries) UpdateMoviePopularity(ctx context.Context, arg UpdateMoviePopularityParams) error {
	_, err := q.db.Exec(ctx, updateMoviePopularity,
		arg.Popularity,
		arg.TmdbID,
		arg.ImdbID,
		arg.MovieID,
	)
	return err
}

const upsertMovie = `-- name: UpsertMovie :one
INSERT INTO movies
(id, filmstaden_id, slug, title, release_date, production_year, runtime, poster, genres)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT (filmstaden_id) DO UPDATE SET update_time  = current_timestamp,
                                          poster       = $8,
                                          release_date = $5
RETURNING id, filmstaden_id, imdb_id, tmdb_id, slug, title, release_date, production_year, runtime, poster, genres, popularity, popularity_update_time, archived, update_time, create_time
`

type UpsertMovieParams struct {
	ID             uuid.UUID      `json:"id"`
	FilmstadenID   string         `json:"filmstadenID"`
	Slug           string         `json:"slug"`
	Title          string         `json:"title"`
	ReleaseDate    sql.NullTime   `json:"releaseDate"`
	ProductionYear int32          `json:"productionYear"`
	Runtime        int32          `json:"runtime"`
	Poster         sql.NullString `json:"poster"`
	Genres         []string       `json:"genres"`
}

func (q *Queries) UpsertMovie(ctx context.Context, arg UpsertMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, upsertMovie,
		arg.ID,
		arg.FilmstadenID,
		arg.Slug,
		arg.Title,
		arg.ReleaseDate,
		arg.ProductionYear,
		arg.Runtime,
		arg.Poster,
		arg.Genres,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.FilmstadenID,
		&i.ImdbID,
		&i.TmdbID,
		&i.Slug,
		&i.Title,
		&i.ReleaseDate,
		&i.ProductionYear,
		&i.Runtime,
		&i.Poster,
		&i.Genres,
		&i.Popularity,
		&i.PopularityUpdateTime,
		&i.Archived,
		&i.UpdateTime,
		&i.CreateTime,
	)
	return i, err
}
