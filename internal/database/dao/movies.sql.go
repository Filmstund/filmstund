// Code generated by sqlc. DO NOT EDIT.
// source: movies.sql

package dao

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const allMovies = `-- name: AllMovies :many
SELECT id, filmstaden_id, imdb_id, tmdb_id, slug, title, release_date, production_year, runtime, poster, genres, archived, update_time, create_time
FROM movies
WHERE archived = $1
order by release_date
`

func (q *Queries) AllMovies(ctx context.Context, archived bool) ([]Movie, error) {
	rows, err := q.db.Query(ctx, allMovies, archived)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.FilmstadenID,
			&i.ImdbID,
			&i.TmdbID,
			&i.Slug,
			&i.Title,
			&i.ReleaseDate,
			&i.ProductionYear,
			&i.Runtime,
			&i.Poster,
			&i.Genres,
			&i.Archived,
			&i.UpdateTime,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const movie = `-- name: Movie :one
select id, filmstaden_id, imdb_id, tmdb_id, slug, title, release_date, production_year, runtime, poster, genres, archived, update_time, create_time
FROM movies
WHERE id = $1
  AND archived = false
order by release_date desc
`

func (q *Queries) Movie(ctx context.Context, id uuid.UUID) (Movie, error) {
	row := q.db.QueryRow(ctx, movie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.FilmstadenID,
		&i.ImdbID,
		&i.TmdbID,
		&i.Slug,
		&i.Title,
		&i.ReleaseDate,
		&i.ProductionYear,
		&i.Runtime,
		&i.Poster,
		&i.Genres,
		&i.Archived,
		&i.UpdateTime,
		&i.CreateTime,
	)
	return i, err
}

const upsertMovie = `-- name: UpsertMovie :one
INSERT INTO movies
(id, filmstaden_id, slug, title, release_date, production_year, runtime, poster, genres)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT (filmstaden_id) DO UPDATE SET update_time  = current_timestamp,
                                          poster       = $8,
                                          release_date = $5
RETURNING id, filmstaden_id, imdb_id, tmdb_id, slug, title, release_date, production_year, runtime, poster, genres, archived, update_time, create_time
`

type UpsertMovieParams struct {
	ID             uuid.UUID      `json:"id"`
	FilmstadenID   string         `json:"filmstadenID"`
	Slug           string         `json:"slug"`
	Title          string         `json:"title"`
	ReleaseDate    sql.NullTime   `json:"releaseDate"`
	ProductionYear int32          `json:"productionYear"`
	Runtime        int32          `json:"runtime"`
	Poster         sql.NullString `json:"poster"`
	Genres         []string       `json:"genres"`
}

func (q *Queries) UpsertMovie(ctx context.Context, arg UpsertMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, upsertMovie,
		arg.ID,
		arg.FilmstadenID,
		arg.Slug,
		arg.Title,
		arg.ReleaseDate,
		arg.ProductionYear,
		arg.Runtime,
		arg.Poster,
		arg.Genres,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.FilmstadenID,
		&i.ImdbID,
		&i.TmdbID,
		&i.Slug,
		&i.Title,
		&i.ReleaseDate,
		&i.ProductionYear,
		&i.Runtime,
		&i.Poster,
		&i.Genres,
		&i.Archived,
		&i.UpdateTime,
		&i.CreateTime,
	)
	return i, err
}
