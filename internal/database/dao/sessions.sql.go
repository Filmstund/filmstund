// Code generated by sqlc. DO NOT EDIT.
// source: sessions.sql

package dao

import (
	"context"

	"github.com/google/uuid"
)

const addSession = `-- name: AddSession :exec
INSERT INTO sessions (id, user_id, refresh_token, principal)
VALUES ($1, $2, $3, $4)
`

type AddSessionParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"userID"`
	RefreshToken string    `json:"refreshToken"`
	Principal    []byte    `json:"principal"`
}

func (q *Queries) AddSession(ctx context.Context, arg AddSessionParams) error {
	_, err := q.db.Exec(ctx, addSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.Principal,
	)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE
FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, refresh_token, principal, expiration_date, created_date, last_modified_date
FROM sessions
WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.Principal,
		&i.ExpirationDate,
		&i.CreatedDate,
		&i.LastModifiedDate,
	)
	return i, err
}
