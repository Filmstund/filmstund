// Code generated by sqlc. DO NOT EDIT.
// source: showings.sql

package dao

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addShowing = `-- name: AddShowing :one
insert into showings (id, web_id, slug, date, time, movie_id, location,
                      cinema_screen_id, filmstaden_showing_id, admin, pay_to_user)
values ($1, $2, $3, $4, $5, $6, $7, $8,
        $9, $10, $11)
returning id, web_id, slug, date, time, movie_id, location, cinema_screen_id, filmstaden_showing_id, price, tickets_bought, admin, pay_to_user, private, update_time, create_time
`

type AddShowingParams struct {
	ID                  uuid.UUID      `json:"id"`
	WebID               string         `json:"webID"`
	Slug                string         `json:"slug"`
	Date                time.Time      `json:"date"`
	Time                time.Time      `json:"time"`
	MovieID             uuid.UUID      `json:"movieID"`
	Location            string         `json:"location"`
	CinemaScreenID      sql.NullString `json:"cinemaScreenID"`
	FilmstadenShowingID sql.NullString `json:"filmstadenShowingID"`
	Admin               uuid.UUID      `json:"admin"`
	PayToUser           uuid.UUID      `json:"payToUser"`
}

func (q *Queries) AddShowing(ctx context.Context, arg AddShowingParams) (Showing, error) {
	row := q.db.QueryRow(ctx, addShowing,
		arg.ID,
		arg.WebID,
		arg.Slug,
		arg.Date,
		arg.Time,
		arg.MovieID,
		arg.Location,
		arg.CinemaScreenID,
		arg.FilmstadenShowingID,
		arg.Admin,
		arg.PayToUser,
	)
	var i Showing
	err := row.Scan(
		&i.ID,
		&i.WebID,
		&i.Slug,
		&i.Date,
		&i.Time,
		&i.MovieID,
		&i.Location,
		&i.CinemaScreenID,
		&i.FilmstadenShowingID,
		&i.Price,
		&i.TicketsBought,
		&i.Admin,
		&i.PayToUser,
		&i.Private,
		&i.UpdateTime,
		&i.CreateTime,
	)
	return i, err
}

const adminOnShowing = `-- name: AdminOnShowing :one
SELECT exists(SELECT 1
              FROM showings s
              WHERE s.admin = $1
                AND s.id = $2)
`

type AdminOnShowingParams struct {
	AdminUserID uuid.UUID `json:"adminUserID"`
	ShowingID   uuid.UUID `json:"showingID"`
}

func (q *Queries) AdminOnShowing(ctx context.Context, arg AdminOnShowingParams) (bool, error) {
	row := q.db.QueryRow(ctx, adminOnShowing, arg.AdminUserID, arg.ShowingID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteShowing = `-- name: DeleteShowing :execrows
delete
from showings
where id = $1
`

func (q *Queries) DeleteShowing(ctx context.Context, showingID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteShowing, showingID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const publicAttendees = `-- name: PublicAttendees :many
SELECT user_id,
       showing_id,
       (u.first_name || ' ' || u.last_name)::text as name,
       u.first_name::text                         as first_name,
       u.last_name::text                          as last_name,
       u.nick,
       u.phone,
       u.avatar                                   as avatar_url
FROM attendees
         left join users u on u.id = attendees.user_id
where showing_id = $1
`

type PublicAttendeesRow struct {
	UserID    uuid.UUID      `json:"userID"`
	ShowingID uuid.UUID      `json:"showingID"`
	Name      string         `json:"name"`
	FirstName string         `json:"firstName"`
	LastName  string         `json:"lastName"`
	Nick      sql.NullString `json:"nick"`
	Phone     sql.NullString `json:"phone"`
	AvatarURL sql.NullString `json:"avatarUrl"`
}

func (q *Queries) PublicAttendees(ctx context.Context, showingID uuid.UUID) ([]PublicAttendeesRow, error) {
	rows, err := q.db.Query(ctx, publicAttendees, showingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PublicAttendeesRow
	for rows.Next() {
		var i PublicAttendeesRow
		if err := rows.Scan(
			&i.UserID,
			&i.ShowingID,
			&i.Name,
			&i.FirstName,
			&i.LastName,
			&i.Nick,
			&i.Phone,
			&i.AvatarURL,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publicShowings = `-- name: PublicShowings :many
SELECT id, web_id, slug, date, time, movie_id, location, cinema_screen_id, filmstaden_showing_id, price, tickets_bought, admin, pay_to_user, private, update_time, create_time
FROM showings s
WHERE s.date > $1
  AND s.private = false
ORDER BY date DESC
`

func (q *Queries) PublicShowings(ctx context.Context, afterDate time.Time) ([]Showing, error) {
	rows, err := q.db.Query(ctx, publicShowings, afterDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Showing
	for rows.Next() {
		var i Showing
		if err := rows.Scan(
			&i.ID,
			&i.WebID,
			&i.Slug,
			&i.Date,
			&i.Time,
			&i.MovieID,
			&i.Location,
			&i.CinemaScreenID,
			&i.FilmstadenShowingID,
			&i.Price,
			&i.TicketsBought,
			&i.Admin,
			&i.PayToUser,
			&i.Private,
			&i.UpdateTime,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const showingByID = `-- name: ShowingByID :one
select id, web_id, slug, date, time, movie_id, location, cinema_screen_id, filmstaden_showing_id, price, tickets_bought, admin, pay_to_user, private, update_time, create_time
from showings
WHERE id = $1
`

func (q *Queries) ShowingByID(ctx context.Context, id uuid.UUID) (Showing, error) {
	row := q.db.QueryRow(ctx, showingByID, id)
	var i Showing
	err := row.Scan(
		&i.ID,
		&i.WebID,
		&i.Slug,
		&i.Date,
		&i.Time,
		&i.MovieID,
		&i.Location,
		&i.CinemaScreenID,
		&i.FilmstadenShowingID,
		&i.Price,
		&i.TicketsBought,
		&i.Admin,
		&i.PayToUser,
		&i.Private,
		&i.UpdateTime,
		&i.CreateTime,
	)
	return i, err
}

const showingByWebID = `-- name: ShowingByWebID :one
select id, web_id, slug, date, time, movie_id, location, cinema_screen_id, filmstaden_showing_id, price, tickets_bought, admin, pay_to_user, private, update_time, create_time
from showings
WHERE web_id = $1
`

func (q *Queries) ShowingByWebID(ctx context.Context, webID string) (Showing, error) {
	row := q.db.QueryRow(ctx, showingByWebID, webID)
	var i Showing
	err := row.Scan(
		&i.ID,
		&i.WebID,
		&i.Slug,
		&i.Date,
		&i.Time,
		&i.MovieID,
		&i.Location,
		&i.CinemaScreenID,
		&i.FilmstadenShowingID,
		&i.Price,
		&i.TicketsBought,
		&i.Admin,
		&i.PayToUser,
		&i.Private,
		&i.UpdateTime,
		&i.CreateTime,
	)
	return i, err
}
