// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package sqlc

import (
	"context"
)

const listCommandments = `-- name: ListCommandments :many
SELECT number, phrase
FROM commandment
ORDER BY number
`

type ListCommandmentsRow struct {
	Number int32  `json:"number"`
	Phrase string `json:"phrase"`
}

func (q *Queries) ListCommandments(ctx context.Context) ([]ListCommandmentsRow, error) {
	rows, err := q.db.Query(ctx, listCommandments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCommandmentsRow
	for rows.Next() {
		var i ListCommandmentsRow
		if err := rows.Scan(&i.Number, &i.Phrase); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const randomCommandment = `-- name: RandomCommandment :one
SELECT number, phrase
FROM commandment
ORDER BY random() limit 1
`

type RandomCommandmentRow struct {
	Number int32  `json:"number"`
	Phrase string `json:"phrase"`
}

func (q *Queries) RandomCommandment(ctx context.Context) (RandomCommandmentRow, error) {
	row := q.db.QueryRow(ctx, randomCommandment)
	var i RandomCommandmentRow
	err := row.Scan(&i.Number, &i.Phrase)
	return i, err
}
