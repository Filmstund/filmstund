directive @auth(requires: Role!) on FIELD_DEFINITION

type AdminPaymentDetails {
  attendees: [Attendee!]!
  filmstadenBuyLink: String
  showingID: UUID!
}

type Attendee {
  amountOwed: SEK!
  filmstadenMembershipID: String
  giftCertificateUsed: GiftCertificate
  hasPaid: Boolean!
  showingID: UUID!
  type: PaymentType!
  user: PublicUser!
  userID: UUID!
}

type AttendeePaymentDetails {
  amountOwed: SEK!
  hasPaid: Boolean!
  payTo: PublicUser!
  payer: PublicUser!
  swishLink: String
}

input AttendeePaymentInfoInput {
  amountOwed: SEK!
  hasPaid: Boolean!
  showingID: UUID!
  userID: UUID!
}

scalar Base64ID

type CinemaScreen {
  id: ID!
  name: String!
}

input CinemaScreenInput {
  id: String!
  name: String
}

type Commandments {
  number: Int!
  phrase: String!
}

input CreateShowingInput {
  date: LocalDate!
  filmstadenRemoteEntityID: String
  filmstadenScreen: CinemaScreenInput
  location: String!
  movieID: UUID!
  time: LocalTime!
}

type FilmstadenCityAlias {
  alias: String!
  name: String!
}

type FilmstadenLiteScreen {
  filmstadenID: ID!
  name: String!
}

scalar FilmstadenMembershipID

type FilmstadenSeatCoordinates {
  x: Float!
  y: Float!
}

type FilmstadenSeatDimensions {
  height: Int!
  width: Int!
}

type FilmstadenSeatMap {
  coordinates: FilmstadenSeatCoordinates!
  dimensions: FilmstadenSeatDimensions!
  number: Int!
  row: Int!
  seatType: String!
}

type FilmstadenShowing {
  cinemaName: String!
  filmstadenRemoteEntityID: String!
  screen: FilmstadenLiteScreen!
  seatCount: Int!
  tags: [String!]!
  timeUtc: String!
}

type GiftCertificate {
  expireTime: Time!
  number: String!
  status: GiftCertificate_Status!
}

input GiftCertificateInput {
  expireTime: Time
  number: String!
}

enum GiftCertificate_Status {
  AVAILABLE
  EXPIRED
  PENDING
  UNKNOWN
  USED
}

scalar IMDbID

scalar LocalDate

scalar LocalTime

type Movie {
  archived: Boolean!
  createTime: String!
  filmstadenID: String!
  genres: [String!]!
  id: UUID!
  imdbID: IMDbID
  popularity: Float!
  poster: String
  productionYear: Int!
  releaseDate: String!
  runtime: String!
  slug: String!
  title: String!
  tmdbID: TMDbID
  updateTime: String!
}

type Mutation {
  addGiftCertificates(giftCerts: [GiftCertificateInput!]): User!
  attendShowing(paymentOption: PaymentOption!, showingID: UUID!): Showing!
  createShowing(showing: CreateShowingInput!): Showing!
  deleteGiftCertificate(giftCert: GiftCertificateInput!): User!
  deleteShowing(showingID: UUID!): [Showing!]!
  disableCalendarFeed: User!
  fetchNewMoviesFromFilmstaden(cityAlias: String! = "GB"): [Movie!]!
  invalidateCalendarFeed: User!
  markAsBought(price: SEK!, showingID: UUID!): Showing!
  processTicketUrls(showingID: UUID!, ticketUrls: [String!]): Showing!
  promoteToAdmin(showingID: UUID!, userToPromote: UUID!): Showing!
  unattendShowing(showingID: UUID!): Showing!
  updateAttendeePaymentInfo(paymentInfo: AttendeePaymentInfoInput!): Attendee!
  updateShowing(newValues: UpdateShowingInput, showingID: UUID!): Showing!
  updateUser(newInfo: UserDetailsInput!): User!
}

input PaymentOption {
  ticketNumber: String
  type: PaymentType!
}

enum PaymentType {
  GIFT_CERTIFICATE
  SWISH
}

type PublicAttendee {
  showingID: UUID!
  userID: UUID!
  userInfo: PublicUser!
}

type PublicUser {
  avatarURL: String
  firstName: String!
  id: UUID!
  lastName: String!
  name: String!
  nick: String
  phone: String
}

type Query {
  allCommandments: [Commandments!]!
  allMovies: [Movie!]!
  allUsers: [PublicUser!]!
  archivedMovies: [Movie!]!
  currentUser: User!
  filmstadenCities: [FilmstadenCityAlias!]!
  filmstadenShowings(
    afterDate: LocalDate
    city: String = "GB"
    movieID: UUID!
  ): [FilmstadenShowing!]!
  movie(id: UUID!): Movie
  previouslyUsedLocations: [String!]!
  publicShowings(afterDate: LocalDate): [Showing!]!
  randomCommandment: Commandments!
  showing(id: UUID, webID: Base64ID): Showing
  showingForMovie(movieId: UUID): [Showing!]!
}

enum Role {
  SHOWING_ADMIN
  USER
}

scalar SEK

type Seat {
  number: Int!
  row: Int!
}

type SeatRange {
  numbers: [Int!]!
  row: Int!
}

type Showing {
  admin: PublicUser!
  adminPaymentDetails: AdminPaymentDetails
  attendeePaymentDetails: AttendeePaymentDetails
  attendees: [PublicAttendee!]!
  cinemaScreen: CinemaScreen
  createTime: Time!
  date: LocalDate!
  filmstadenSeatMap: [FilmstadenSeatMap!]!
  filmstadenShowingID: String
  id: UUID!
  location: String!
  movie: Movie!
  movieID: UUID!
  myTickets: [Ticket!]!
  payToUser: PublicUser!
  price: SEK
  private: Boolean!
  slug: String!
  ticketRange: TicketRange
  ticketsBought: Boolean!
  time: LocalTime!
  updateTime: Time!
  webID: Base64ID!
}

scalar TMDbID

type Ticket {
  assignedToUser: UUID!
  attributes: [String!]!
  barcode: String!
  cinema: String!
  cinemaCity: String
  customerType: String!
  customerTypeDefinition: String!
  date: LocalDate!
  id: String!
  movieName: String!
  movieRating: String!
  profileID: String
  screen: String!
  seat: Seat!
  showingID: UUID!
  time: String!
}

type TicketRange {
  rows: [Int!]!
  seatings: [SeatRange!]!
  totalCount: Int!
}

scalar Time

scalar UUID

input UpdateShowingInput {
  date: LocalDate!
  filmstadenRemoteEntityID: String
  location: String!
  payToUser: UUID!
  price: SEK!
  time: LocalTime!
}

type User {
  avatarURL: String
  calendarFeedID: UUID
  calendarFeedUrl: String
  email: String!
  filmstadenMembershipID: FilmstadenMembershipID
  firstName: String!
  giftCertificates: [GiftCertificate!]!
  id: UUID!
  lastLoginTime: Time!
  lastName: String!
  name: String!
  nick: String
  phone: String
  signupTime: Time!
  updateTime: Time!
}

input UserDetailsInput {
  filmstadenMembershipID: FilmstadenMembershipID
  firstName: String
  lastName: String
  nick: String
  phone: String
}
